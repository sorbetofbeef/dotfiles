#!/bin/bash

#
# MKALL
#
# function that handles the most basic and common of build processes

function mkall () {
	while getopts "cntC:" opts; do
		case $opts in 

			n ) 
         export skip=true
				 export check_type='skip'
				 ;;

			t ) 
         export skip=false
				 export check_type='test'
				 ;;

			c ) 
         export skip=false
				 export check_type='check'
				 ;;

      C ) 
         export skip=false
         export check_type="custom"
         export args="$OPTARG"
         ;;
      ? )
         printf '\n\n\e[31mUnrecognized options passed. Aborting!\e[0m\n' 
				 printf 'Usage: %s < (-t)est|(-c)heck|(-n)o-test > \n\n\n' "$0"
				 sleep 2
				 return 1
				 ;;
	  esac
	done

  function log () {
    log_type=$1

    msg_ok='\n\n[ \e[32mOK\e[0m ]\n'
	  msg_pass='\n\n[ \e[32mPASS\e[0m ]\n'
    msg_fail='\n\n[ \e[31mFAIL\e[0m ]\n'
    msg_test='\n\n\n[ \e[31;1mTESTING\e[0m ]\n\n\n\n'
    msg_check='\n\n\n[ \e[32;1mCHECKING\e[0m ]\n\n\n\n'
    msg_skip='\n\n\n[ \e[1;33;1mSKIPPING TEST-SUITES...\e[0m ]\n\n\n\n'

    sleep 1
    case $log_type in 
      'ok' )
        printf %s $msg_ok
        ;;
      'pass' )
        printf %s $msg_pass
        ;;
      'fail' ) 
        printf %s $msg_fail
        sleep 2
        ;;
      'test' ) 
        printf %s $msg_test
        ;;
      'check' ) 
        printf %s $msg_check
        ;;
      'skip' ) 
        printf %s $msg_test
        ;;
      * )
        echo "Uknown error; aborting!"
        exit 0
        ;;
    esac
    sleep 2
    unset log_type msg_{ok,pass,fail,test,check,skip}
  }

	function test_suite () {
    log $check_type
	  # test build
	  if [ "$skip" ]; then
	  	export ret_val=0
      log 'ok'
	  else
	  	if [ "$check_type" = 'test' ]; then
        make test
	  		export ret_val=${?}
        log 'ok'
      elif [ "$check_type" = 'check']; then
	  		make check
	  		export ret_val=${?}
        log 'ok'
	  	fi
	  fi

	  # checks tests
	  if [ "$ret_val" -gt 0 ] ; then 
	  	printf '\nStatus indicates a failure during tests. Continue anyway?\n(n/Y)  '
	  	read -r -n1 check
	  	sleep 1
	  	if [ "$check" = 'n' ]; then
        log 'fail' && exit 1
	  	fi
	  fi
	}

	# start build
  (make && log 'pass') || (log 'fail' && exit 1)
  #test
  (test_suite && log 'pass') || (log 'fail' && exit 1)
	# installs build
  (sudo make install && log 'pass') || (log 'fail' && exit 1)
  # return to sources directory
	cd $HOME/.local/src
  # clear variables
	unset skip check check_type ret_val
}

