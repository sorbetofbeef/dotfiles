# ~/.zprofile
# .zprofile is sourced on login after zshenv and zlogin

## INITIAL SETUP ##
## APPLICATION SETTINGS ##
# xdg standard
export XDG_SESSION_TYPE="wayland"
export XDG_SESSION_DESKTOP="sway"
export XDG_CURRENT_DESKTOP="sway"
export DESKTOP_SESSION="sway"
export XDG_CONFIG_HOME="${HOME}/.config"
export XDG_DATA_HOME="${HOME}/.local/share"
export XDG_CACHE_HOME="${HOME}/.cache"
#xkb
export XKB_DEFAULT_LAYOUT="us"
export XKB_DEFAULT_OPTIONS="altwin:swap_lalt_lwin,caps:ctrl_modifier"
# default programs
export EDITOR=nvim
export VISUAL=nvim
# chromium chrome API keys
# export GOOGLE_API_KEY="AIzaSyDIIu9Bx5jwTDfkmRURZ95yC2FdmEcrQpo"
# export GOOGLE_DEFAULT_CLIENT_ID="262047106337-aa6ulttav15v6tu16utfalra9es7v7fb.apps.googleusercontent.com"
# export GOOGLE_DEFAULT_CLIENT_SECRET="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"
export CHROME_FLAGS="$CHROME_FLAGS --enable-features=VaapiVideoDecoder"
# pass
export PASSWORD_STORE_DIR="${XDG_DATA_HOME}/password-store"
# tmux
export TMUX_TMPDIR="${XDG_RUNTIME_DIR}"
# chat/email/web
export WEECHAT_HOME="${XDG_CONFIG_HOME}/weechat"
export NOTMUCH_CONFIG="${XDG_CONFIG_HOME}/notmuch-config"
export MBSYNCRC="${XDG_CONFIG_HOME}/mbsync/mbsyncrc"
export WWW_HOME="${XDG_CONFIG_HOME}/w3m"
export WGETRC="${XDG_CONFIG_HOME}/wget/wgetrc"
# less
export LESS=-R
export LESSOPEN="| /usr/bin/highlight -O ansi %s 2>/dev/null"
export LESSHISTFILE="-"
# gtk/gdk
export GTK2_RC_FILES="${XDG_CONFIG_HOME}/gtk-2.0/gtkrc"
# export GDK_BACKEND="wayland"
export GTK_CSD=1
export MOZ_ENABLE_WAYLAND=1
export MOZ_USE_XINPUT2=1
# qt
export QT_QPA_PLATFORMTHEME="qt5ct"
export QT_QPA_PLATFORM="wayland-egl"
export QT_WAYLAND_DISABLE_WINDOWDECORATION=0
# zsh
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=cyan,bold,underline"
export ZDOTDIR="${XDG_CONFIG_HOME}/zsh"
fpath+="${ZDOTDIR}/zsh_functions"

## DEV ##
# go
export GOPATH="${XDG_DATA_HOME}/go"
export GO111MODULE='on'
# rust
export CARGO_HOME="${XDG_DATA_HOME}/cargo"
export RUSTUP_HOME="${XDG_DATA_HOME}/rustup"
export RUSTC_WRAPPER="/usr/bin/sccache"
# ansible
export ANSIBLE_CONFIG="${XDG_CONFIG_HOME}/ansible/ansible.cfg"
# node/npm/yarn
export npm_config_userconfig="${XDG_CONFIG_HOME}/npmrc"
export npm_config_cache="${XDG_CACHE_HOME}/npm"
# Java
export ANDROID_SDK_HOME="${XDG_CONFIG_HOME}/android"
export AWT_TOOLKIT="MToolkit wmname LG3D"
export _JAVA_AWT_WM_NONREPARENTING=1
# javascript

## PATH ##
PATH="${HOME}/.local/bin":"${XDG_DATA_HOME}/go/bin":"${XDG_DATA_HOME}/cargo/bin":"/usr/local/bin":"$(yarn global bin)":"${PATH}"
export PATH=/usr/lib/ccache/bin:$PATH
fpath+=/home/me/.config/zsh/zsh_functions

## STARTUP PROGRAMS ##
# lf
source ~/.config/lf/icons
# export "$(dbus-launch)"

# if [ "$TERM" = "linux" ]; then
# 	printf %b '\e[40m' '\e[8]' # set default background to color 0 'dracula-bg'
# 	printf %b '\e[37m' '\e[8]' # set default foreground to color 7 'dracula-fg'
# 	printf %b '\e]P0282a36'    # redefine 'black'          as 'dracula-bg'
# 	printf %b '\e]P86272a4'    # redefine 'bright-black'   as 'dracula-comment'
# 	printf %b '\e]P1ff5555'    # redefine 'red'            as 'dracula-red'
# 	printf %b '\e]P9ff7777'    # redefine 'bright-red'     as '#ff7777'
# 	printf %b '\e]P250fa7b'    # redefine 'green'          as 'dracula-green'
# 	printf %b '\e]PA70fa9b'    # redefine 'bright-green'   as '#70fa9b'
# 	printf %b '\e]P3f1fa8c'    # redefine 'brown'          as 'dracula-yellow'
# 	printf %b '\e]PBffb86c'    # redefine 'bright-brown'   as 'dracula-orange'
# 	printf %b '\e]P4bd93f9'    # redefine 'blue'           as 'dracula-purple'
# 	printf %b '\e]PCcfa9ff'    # redefine 'bright-blue'    as '#cfa9ff'
# 	printf %b '\e]P5ff79c6'    # redefine 'magenta'        as 'dracula-pink'
# 	printf %b '\e]PDff88e8'    # redefine 'bright-magenta' as '#ff88e8'
# 	printf %b '\e]P68be9fd'    # redefine 'cyan'           as 'dracula-cyan'
# 	printf %b '\e]PE97e2ff'    # redefine 'bright-cyan'    as '#97e2ff'
# 	printf %b '\e]P7f8f8f2'    # redefine 'white'          as 'dracula-fg'
# 	printf %b '\e]PFffffff'    # redefine 'bright-white'   as '#ffffff'
# 	clear
# fi

# gpg
_gpg () {
  	export GPG_TTY="$(tty)" 
  	gpg-connect-agent UPDATESTARTUPTTY /bye >> /home/me/.local/var/logs/sway.log
}

# ssh
_ssh () {
  	eval $(ssh-agent) >> /home/me/.local/var/logs/sway.log
  	export SSH_AUTH_SOCK
  	export SSH_AGENT_PID
  	ssh-add ~/.ssh/id_ed25519 >> /home/me/.local/var/logs/sway.log
}

# sway
_sway () {
  sway 2> /home/me/.local/var/logs/sway.log >> /home/me/.local/var/logs/sway.log
}

# qtile
_qtile () {
  qtile start -b wayland 2> /home/me/.local/var/logs/qtile.log >> /home/me/.local/var/logs/qtile.log
}

# japokwm
_river () {
  river 2> /home/me/.local/var/logs/qtile.log >> /home/me/.local/var/logs/qtile.log
}

# start wayland wm
start () {
  arg="$1"
  if [[ "$#" -gt 1 ]]; then
    echo "Only one argument should be supplied -q for qtile and -s for sway"
  elif [[ $arg != -* ]]; then
    echo "Invalid argument, options are -q for qtile and -s for sway"
  else
    _gpg
    _ssh
    case $arg in 
     	-s ) _sway
           ;;
     	-q ) _qtile
           ;;
     	-r ) _river
           ;;
       * )
         exit 1
         ;;
    esac
    clear
  fi
}

[[ $(tty) == /dev/tty1 ]] && start -r

## UNUSED ##
# dbus and river
# if [[ $(tty) == /dev/tty1 ]]; then 
#   export $(dbus-launch)
#   eval $(keychain --dir ~/.ssh/keychain --eval 4163DAE3A25242C4 ~/.ssh/id_ed25519 --agents gpg,ssh) &&
#   exec dbus-run-session -- river
# fi

# if [[ $(tty) == /dev/tty1 ]]; then 
#   export $(dbus-launch)
#   eval $(keychain --dir ~/.ssh/keychain --eval 4163DAE3A25242C4 ~/.ssh/id_ed25519 --agents gpg,ssh) &&
#   startx
# fi

# X11
# export XINITRC="$XDG_CONFIG_HOME"/x11/xinitrc
# export XAUTHORITY="$XDG_RUNTIME_DIR"/Xauthority
