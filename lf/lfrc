######
# Configuration for lf 
# ~/.config/lf/lfrc
#


### SETTINGS

# General
set icons true
set drawbox true
set globsearch true
set incsearch true
set number true
set relativenumber true
set scrolloff 4
set tabstop 2

# Shell
set shell sh
set shellopts '-eu'
set ifs "\n"

# Unset any prolematic keybinds
map e
map E
map <c-e>
map <a-e>
map a
map A
map r
map <c-p>
map +
map -
map <c-g>


### CUSTOM COMMANDS

# Opens text/* mime type with $EDITOR; other mimetpyes with $OPENEr
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# Renames a file unless target file exists
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# RIP
cmd trash %set -f; rip --graveyard="${HOME}/.local/share/trash" $fx 
cmd untrash %{{
  set -f

  if [[ -e $fs ]]; then
    rip -u --graveyard="${HOME}/.local/share/trash" $fs
  else
    rip -u --graveyard="${HOME}/.local/share/trash"
  fi
}}

# extract the current file with the right command
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and xz
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar cf $1.tar.xz --compress-program='xz -z -9e -T4 -f' $1 
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}


# Link
cmd link !{{
  set -f

  while getopts ":dfo:" option ; do
    case $option in 
      f ) p='f' ;;
          #   arg=${2:-'..'} ;; 
      d ) sup="$(doas)" ;;
      o ) arg=$OPTARG ;;
      \? ) echo "invalid option"
    esac
  done

  for file in $fx ; do
    target="${file##*/}"
    ${sup:-''}ln -sv${p:-''} "${file}" ${arg:='..'}/${target/%.[sl][hu]*}
  done
}}


# Git
cmd git-add !{{
  set -f 

  if [[ -n $fs ]]; then
    loop=true
    while $loop; do
      for files in $fx ; do 
        function add_entry {
          target=$1
          file=$2
          ref="$(dirname $file)"
          t="${file##*/}"
          entry="${ref##$HOME/$target/}/${t}"
          echo $entry
          ! rg -q -i "$entry" ~/$target/.git-add && printf '%s\n' "$entry" >> ~/$target/.git-add
        }

        case $files in
          */.local* ) add_entry ".local" "$files" ;;
          */.config* ) add_entry ".config" "$files" ;;
          */docs* ) add_entry "docs" "$files" ;;
          * ) echo "error in for loop" ;;
        esac
      done
      loop=false
    done
  fi

  case $fx in 
    */.local* ) git add --verbose $(cat ~/.local/.git-add) ;;
    */.config* ) git add --verbose $(cat ~/.config/.git-add) ;;
    */docs* ) git add --verbose $(cat ~/docs/.git-add) ;;
    * ) echo "error in last case" ;;
  esac
}}

# Chown
cmd chown %set -f; doas chown -v $1 $fx
cmd chown-recurse %set -f; doas chown -Rv $1 $fx


### KEYBINDS

#General
map <enter> shell

map o &mimeopen $f
map O &doas mimeopen $f

map H set hidden!

map a push $mkdir<space>

map <delete> :delete $fx
map D :trash $fx
map u :untrash $fx

map r push :rename<space>

# Link
map <c-l>
map <c-l>l push :link<space>-o<space>
map <c-l>L push :link<space>-fo<space>
map <c-l>d push :link<space>-do<space>
map <c-l>D push :link<space>-dfo<space>


# Neovim
map e $nvim $fx
map a push $nvim<space>
map <c-e> push $doas<space>nvim<space>
map <a-e> $nvim /home/me/.config/lf/lfrc

# Paru
map <c-p>p $pcurses
map <c-p>i push !paru<space>-Syu<space>
map <c-p>r push !paru<space>-Rscu<space>
map <c-p>f push !paru<space>-Ss<space>

# Add permission
map +x %doas chmod -v +x $fx
map +r %doas chmod -v +r $fx
map +w %doas chmod -v +w $fx

# Remove permission
map -x %doas chmod -v -x $fx
map -r %doas chmod -v -r $fx
map -w %doas chmod -v -w $fx

# Chown
map <a-o> push :chown<space>
map <a-O> push :chown-recurse<space>

# Git
map <c-g>g $gitui
  # create/clone
map <c-g>m push %gh<space>repo<space>create<space>--public<space>
map <c-g>M push %gh<space>repo<space>create<space>--private<space>
map <c-g>C push %gh<space>repo<space>clone<space>
  # add/push/push
map <c-g>a :git-add $fx
map <c-g>c push !git<space>commit<space>-m<space>
map <c-g>p !git push
map <c-g>u push !git<space>push<space>-u<space>
  # pull/fetch/merge
map <c-g>P push !git<space>pull<space>
map <c-g>f push !git<space>fetch<space>--all<space>
map <c-g><c-m> !git merge $fx


