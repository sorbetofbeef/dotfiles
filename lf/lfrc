set icons true
set drawbox true
set globsearch true
set incsearch true
set number true
set relativenumber true
set scrolloff 4
set tabstop 2

set shell sh
set shellopts '-eu'
set ifs "\n"

cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $EDITOR $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

cmd trash %set -f; mv -f $fx ~/.local/share/trash

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar cf $1.tar $1 | xz -z -9e -T 0
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd link-scripts !{{
  set -f
  script_dir=${HOME}/.local/bin/scripts
  target_dir=${HOME}/.local/bin
  pushd "$script_dir"
    for script in ./* ; do
      target="${script%%.*}"
      ln -sfv "${script_dir}/${script}" "${target_dir}/${target}"
    done
  popd
}}

cmd git-add !{{
  set -f 

  if [[ -n $fs ]]; then
    loop=true
    while $loop; do
      for files in $fx ; do 
        function add_entry {
          target=$1
          file=$2
          ref="$(dirname $file)"
          t="${file##*/}"
          entry="${ref##$HOME/$target/}/${t}"
          echo $entry
          ! rg -q -i "$entry" ~/$target/.git-add && printf '%s\n' "$entry" >> ~/$target/.git-add
        }

        case $files in
          */.local* ) add_entry ".local" "$files" ;;
          */.config* ) add_entry ".config" "$files" ;;
          */docs* ) add_entry "docs" "$files" ;;
          * ) echo "error in for loop"
        esac
      done
      loop=false
    done
  fi

  case $fx in 
    */.local* ) git add --verbose $(cat ~/.local/.git-add) ;;
    */.config* ) git add --verbose $(cat ~/.config/.git-add) ;;
    */docs* ) git add --verbose $(cat ~/docs/.git-add) ;;
    * ) echo "error in last case"
  esac
}}

cmd backup !{{
    set -f
    git_dir=${HOME}
}}

map <enter> shell

map o &mimeopen $f
map O &mimeopen --ask $f

map H set hidden!

map a push $nvim<space>
map A push $mkdir<space>

map <delete> trash
map D trash

map r
map r push :rename<space>

map <c-p>
map <c-p>i push !paru<space>-Syu<space>
map <c-p>r push !paru<space>-Rscu<space>
map <c-p>f push !paru<space>-Ss<space>

map +
map +x %doas chmod -v +x $fx
map +r %doas chmod -v +r $fx
map +w %doas chmod -v +w $fx

map -
map -x %doas chmod -v -x $fx
map -r %doas chmod -v -r $fx
map -w %doas chmod -v -w $fx

map <c-g>
map <c-a> :git-add $fx
map <c-g>a :git-add $fx
map <c-g>c push !git<space>commit<space>-m<space>
map <c-g>p !git push
map <c-g>u push !git<space>push<space>-u<space>

